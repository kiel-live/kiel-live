package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/kiel-live/kiel-live/hub/graph/model"
)

// SetVehicle is the resolver for the setVehicle field.
func (r *mutationResolver) SetVehicle(ctx context.Context, vehicle model.VehicleInput) (*model.Vehicle, error) {
	// channelID := "123" // TODO
	// dbID := "subscription:map:" + channelID

	// r.DB.Update(func(tx *buntdb.Tx) error {
	// 	pos := fmt.Sprintf("[%f %f],[%f %f]", minLat, minLat, maxLat, maxLng)
	// 	tx.Set(dbID, pos, nil)
	// 	return nil
	// })

	channels, err := r.GetMapChannels(vehicle.Location.Latitude, vehicle.Location.Longitude)
	if err != nil {
		return nil, err
	}

	for _, ch := range channels {
		ch <- &model.Map{
			Vehicles: []*model.Vehicle{},
		}
	}

	return nil, nil
}

// RemoveVehicle is the resolver for the removeVehicle field.
func (r *mutationResolver) RemoveVehicle(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveVehicle - removeVehicle"))
}

// SetStop is the resolver for the setStop field.
func (r *mutationResolver) SetStop(ctx context.Context, stop model.StopInput) (*model.Stop, error) {
	panic(fmt.Errorf("not implemented: SetStop - setStop"))
}

// RemoveStop is the resolver for the removeStop field.
func (r *mutationResolver) RemoveStop(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveStop - removeStop"))
}

// SetRoute is the resolver for the setRoute field.
func (r *mutationResolver) SetRoute(ctx context.Context, route model.RouteInput) (*model.Route, error) {
	panic(fmt.Errorf("not implemented: SetRoute - setRoute"))
}

// RemoveRoute is the resolver for the removeRoute field.
func (r *mutationResolver) RemoveRoute(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveRoute - removeRoute"))
}

// SetTrip is the resolver for the setTrip field.
func (r *mutationResolver) SetTrip(ctx context.Context, trip model.TripInput) (*model.Trip, error) {
	panic(fmt.Errorf("not implemented: SetTrip - setTrip"))
}

// RemoveTrip is the resolver for the removeTrip field.
func (r *mutationResolver) RemoveTrip(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveTrip - removeTrip"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
