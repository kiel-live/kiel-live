package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/kiel-live/kiel-live/hub/graph/model"
	"github.com/kiel-live/kiel-live/shared/models"
)

// SetVehicle is the resolver for the setVehicle field.
func (r *mutationResolver) SetVehicle(ctx context.Context, vehicle model.VehicleInput) (*models.Vehicle, error) {
	_vehicle := vehicle.ToVehicle()

	err := r.DB.SetVehicle(_vehicle)
	if err != nil {
		return nil, err
	}

	err = r.PubSub.Publish(ctx, fmt.Sprintf("vehicle-updated:%s", vehicle.ID), _vehicle.ToJSON())
	if err != nil {
		return nil, err
	}

	err = r.PubSub.Publish(ctx, fmt.Sprintf("map-vehicle-updated:%d", _vehicle.Location.GetCellID()), _vehicle.ToJSON())
	if err != nil {
		return nil, err
	}

	return _vehicle, nil
}

// RemoveVehicle is the resolver for the removeVehicle field.
func (r *mutationResolver) RemoveVehicle(ctx context.Context, id string) (bool, error) {
	vehicle, err := r.DB.GetVehicle(id)
	if err != nil {
		return false, err
	}

	err = r.DB.DeleteVehicle(id)
	if err != nil {
		return false, err
	}

	err = r.PubSub.Publish(ctx, fmt.Sprintf("vehicle-deleted:%s", vehicle.ID), vehicle.ToJSON())
	if err != nil {
		return false, err
	}

	err = r.PubSub.Publish(ctx, fmt.Sprintf("map-vehicle-deleted:%d", vehicle.Location.GetCellID()), vehicle.ToJSON())
	if err != nil {
		return false, err
	}

	return true, nil
}

// SetStop is the resolver for the setStop field.
func (r *mutationResolver) SetStop(ctx context.Context, stop model.StopInput) (*models.Stop, error) {
	_stop := stop.ToStop()

	err := r.DB.SetStop(_stop)
	if err != nil {
		return nil, err
	}

	err = r.PubSub.Publish(ctx, fmt.Sprintf("stop-updated:%s", stop.ID), _stop.ToJSON())
	if err != nil {
		return nil, err
	}

	err = r.PubSub.Publish(ctx, fmt.Sprintf("map-stop-updated:%d", _stop.Location.GetCellID()), _stop.ToJSON())
	if err != nil {
		return nil, err
	}

	return _stop, nil
}

// RemoveStop is the resolver for the removeStop field.
func (r *mutationResolver) RemoveStop(ctx context.Context, id string) (bool, error) {
	stop, err := r.DB.GetStop(id)
	if err != nil {
		return false, err
	}

	err = r.DB.DeleteStop(id)
	if err != nil {
		return false, err
	}

	err = r.PubSub.Publish(ctx, fmt.Sprintf("stop-deleted:%s", stop.ID), stop.ToJSON())
	if err != nil {
		return false, err
	}

	err = r.PubSub.Publish(ctx, fmt.Sprintf("map-stop-deleted:%d", stop.Location.GetCellID()), stop.ToJSON())
	if err != nil {
		return false, err
	}

	return true, nil
}

// SetRoute is the resolver for the setRoute field.
func (r *mutationResolver) SetRoute(ctx context.Context, route model.RouteInput) (*models.Route, error) {
	panic(fmt.Errorf("not implemented: SetRoute - setRoute"))
}

// RemoveRoute is the resolver for the removeRoute field.
func (r *mutationResolver) RemoveRoute(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveRoute - removeRoute"))
}

// SetTrip is the resolver for the setTrip field.
func (r *mutationResolver) SetTrip(ctx context.Context, trip model.TripInput) (*models.Trip, error) {
	panic(fmt.Errorf("not implemented: SetTrip - setTrip"))
}

// RemoveTrip is the resolver for the removeTrip field.
func (r *mutationResolver) RemoveTrip(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveTrip - removeTrip"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
