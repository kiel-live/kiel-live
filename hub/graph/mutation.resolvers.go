package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/kiel-live/kiel-live/hub/graph/model"
)

// UpdateVehicle is the resolver for the updateVehicle field.
func (r *mutationResolver) UpdateVehicle(ctx context.Context, vehicle model.VehicleInput) (*model.Vehicle, error) {
	// channelID := "123" // TODO
	// dbID := "subscription:map:" + channelID

	// r.DB.Update(func(tx *buntdb.Tx) error {
	// 	pos := fmt.Sprintf("[%f %f],[%f %f]", minLat, minLat, maxLat, maxLng)
	// 	tx.Set(dbID, pos, nil)
	// 	return nil
	// })

	channels, err := r.GetMapChannels(vehicle.Location.Latitude, vehicle.Location.Longitude)
	if err != nil {
		return nil, err
	}

	for _, ch := range channels {
		ch <- &model.Map{
			Vehicles: []*model.Vehicle{&vehicle},
		}
	}

	return nil, nil
}

// RemoveVehicle is the resolver for the removeVehicle field.
func (r *mutationResolver) RemoveVehicle(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveVehicle - removeVehicle"))
}

// UpdateStop is the resolver for the updateStop field.
func (r *mutationResolver) UpdateStop(ctx context.Context, stop model.StopInput) (*model.Stop, error) {
	panic(fmt.Errorf("not implemented: UpdateStop - updateStop"))
}

// RemoveStop is the resolver for the removeStop field.
func (r *mutationResolver) RemoveStop(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveStop - removeStop"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
