package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/kiel-live/kiel-live/shared/database"
	"github.com/kiel-live/kiel-live/shared/models"
)

// Map is the resolver for the map field.
func (r *queryResolver) Map(ctx context.Context, minLat float64, minLng float64, maxLat float64, maxLng float64) (*models.Map, error) {
	opts := &database.ListOptions{
		Location: &models.BoundingBox{
			MinLat: minLat,
			MinLng: minLng,
			MaxLat: maxLat,
			MaxLng: maxLng,
		},
	}

	stops, err := r.DB.GetStops(opts)
	if err != nil {
		return nil, err
	}

	vehicles, err := r.DB.GetVehicles(opts)
	if err != nil {
		return nil, err
	}

	return &models.Map{
		Stops:    stops,
		Vehicles: vehicles,
	}, nil
}

// Stop is the resolver for the stop field.
func (r *queryResolver) Stop(ctx context.Context, id string) (*models.Stop, error) {
	return r.DB.GetStop(id)
}

// Vehicle is the resolver for the vehicle field.
func (r *queryResolver) Vehicle(ctx context.Context, id string) (*models.Vehicle, error) {
	return r.DB.GetVehicle(id)
}

// Trip is the resolver for the trip field.
func (r *queryResolver) Trip(ctx context.Context, id string) (*models.Trip, error) {
	panic(fmt.Errorf("not implemented: Trip - trip"))
}

// Route is the resolver for the route field.
func (r *queryResolver) Route(ctx context.Context, id string) (*models.Route, error) {
	panic(fmt.Errorf("not implemented: Route - route"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
