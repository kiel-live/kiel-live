package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/kiel-live/kiel-live/hub/graph/model"
)

// UpdateVehicle is the resolver for the updateVehicle field.
func (r *mutationResolver) UpdateVehicle(ctx context.Context, vehicle model.VehicleInput) (*model.Vehicle, error) {
	panic(fmt.Errorf("not implemented: UpdateVehicle - updateVehicle"))
}

// RemoveVehicle is the resolver for the removeVehicle field.
func (r *mutationResolver) RemoveVehicle(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveVehicle - removeVehicle"))
}

// UpdateStop is the resolver for the updateStop field.
func (r *mutationResolver) UpdateStop(ctx context.Context, stop model.StopInput) (*model.Stop, error) {
	panic(fmt.Errorf("not implemented: UpdateStop - updateStop"))
}

// RemoveStop is the resolver for the removeStop field.
func (r *mutationResolver) RemoveStop(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveStop - removeStop"))
}

// Stops is the resolver for the stops field.
func (r *queryResolver) Stops(ctx context.Context) ([]*model.Stop, error) {
	return nil, fmt.Errorf("not implemented: Stops - stops")
}

// Vehicles is the resolver for the vehicles field.
func (r *queryResolver) Vehicles(ctx context.Context) ([]*model.Vehicle, error) {
	return nil, fmt.Errorf("not implemented: Vehicles - vehicles")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
